generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tags {
  ai
  all
  finances
  crypto
  startups
}

model Posts {
  id            String    @id @default(uuid())
  slug          String    @unique
  tag           Tags
  title         String
  subTitle      String
  content       Json      
  coverImageSrc String
  createdAt     DateTime  @default(now())
  modifiedAt    DateTime  @updatedAt
  authorId      String
  author        Users      @relation("userPosts", fields: [authorId], references: [id])
  likes         Likes[]    @relation("postLikes")
  comments      Comments[] @relation("postComments")
  bookmarks     Bookmarks[] @relation("postBookmarks")

  @@map("posts")
}

model Likes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt
  userId    String
  postId    String
  user      Users     @relation("userLikes", fields: [userId], references: [id])
  post      Posts     @relation("postLikes", fields: [postId], references: [id], onDelete: Cascade)

  @@map("likes")
}


model Comments {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt
  user      Users     @relation("userComments", fields: [userId], references: [id])
  post      Posts     @relation("postComments", fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Bookmarks {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt
  userId    String
  postId    String
  user      Users     @relation("userBookmarks", fields: [userId], references: [id])
  post      Posts     @relation("postBookmarks", fields: [postId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

model EmailAddress {
  id                     String       @id
  emailAddress           String       @map("email_address")
  verificationStatus     String       @map("verification_status")
  verificationStrategy   String       @map("verification_strategy")
  userId                 String
  user                   Users         @relation(fields: [userId], references: [id])

  @@map("email_addresses")
}

model PhoneNumber {
  id                     String       @id
  number                 String?
  userId                 String
  user                   Users         @relation(fields: [userId], references: [id])

  @@map("phone_numbers")
}


model Users {
  id                     String       @id
  firstName              String?      @map("first_name")
  lastName               String?      @map("last_name")
  username               String       @unique @map("username")
  birthday               String?      @map("birthday") 
  externalId             String?      @map("external_id")
  gender                 String?      @map("gender")
  imageUrl               String       @map("image_url")
  lastSignInAt           DateTime?      @map("last_sign_in_at")
  passwordEnabled        Boolean      @map("password_enabled")
  primaryEmailAddressId  String?      @map("primary_email_address_id")
  primaryPhoneNumberId   String?      @map("primary_phone_number_id")
  profileImageUrl        String       @map("profile_image_url")
  twoFactorEnabled       Boolean      @map("two_factor_enabled")
  updatedAt              DateTime       @map("updated_at")
  createdAt              DateTime       @map("created_at")
  privateMetadata        Json         @map("private_metadata")
  publicMetadata         Json         @map("public_metadata")
  unsafeMetadata         Json         @map("unsafe_metadata")
  emailAddresses         EmailAddress[]
  phoneNumbers           PhoneNumber[]
  posts                  Posts[]       @relation("userPosts")
  likes                  Likes[]       @relation("userLikes")
  comments               Comments[]    @relation("userComments")
  bookmarks              Bookmarks[]   @relation("userBookmarks")

  @@map("users")
}

